library ieee;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
use ieee.std_logic_1164.all;
  
ENTITY shift_register IS  
port   
	(  
		clk : in std_logic;  
		reset : in std_logic;  
		w : in std_logic;  
		z : out std_logic  
	);  
end shift_register;
 
architecture shifter of shift_register is  
 
	signal dados <= "000000000" : std_logic_vector (8 downto 0); 

begin  
	-- z <= dados(3); 
	
	process(clk, reset)  
	begin  
		if (reset = '1') then  
			dados <= "000000000";  
		elsif rising_edge(clk) then  
		dados(0) <= w;  
		dados(1) <= dados(0);
		dados(2) <= dados(1);
		dados(3) <= dados(2);
		dados(4) <= dados(3);
		dados(5) <= dados(4);
		dados(6) <= dados(5);
		dados(7) <= dados(6);
		dados(8) <= dados(7);
		end if;  
	end process; 
end architecture;

entity aula8 is
	port(
		w in std_logic;
		led : in std_logic_vector(8 downto 0);
		z: inout std_logic;
		Clk : in std_logic;
		Rst : in std_logic
	);
end aula8;

architecture FSM of aula8 is
-- signal letra : std_logic_vector(11 downto 0);

begin
	pega : entity work.shift_register(shifter) 
		port map(dados(0) => led(0), dados(1) => led(1), dados(2) => led(2), dados(3) => led(3), dados(4) => led(4), 
		dados(5) => led(5), dados(6) => led(6), dados(7) => led(7), dados(8) => led(8), clk => Clk, w => w, z => z, reset => Rst);

end architecture;